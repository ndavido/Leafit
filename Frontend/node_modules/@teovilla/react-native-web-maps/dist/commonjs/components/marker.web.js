"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Marker = void 0;
var _react = _interopRequireDefault(require("react"));
var _api = require("@react-google-maps/api");
var _mouseEvent = require("../utils/mouse-event");
var _callout = require("./callout");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
//Wrapped in class component to provide methods
//forwardRef + useImperativeHandle not sufficient because it returns a ForwardRefExoticComponent which does not seem to render in the MapView
class Marker extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      calloutVisible: false
    };
  }
  showCallout() {
    this.setState({
      calloutVisible: true
    });
  }
  hideCallout() {
    this.setState({
      calloutVisible: false
    });
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(MarkerF, _extends({}, this.props, {
      calloutVisible: this.state.calloutVisible,
      toggleCalloutVisible: () => this.setState({
        calloutVisible: !this.state.calloutVisible
      })
    }));
  }
}
exports.Marker = Marker;
function MarkerF(props) {
  var _props$anchor, _props$anchor2;
  const map = (0, _api.useGoogleMap)();
  const customMarkerContainerRef = _react.default.useRef();
  const [markerSize, setMarkerSize] = _react.default.useState({
    width: 22,
    height: 40
  }); //22 x 40 is the default google maps marker size

  _react.default.useEffect(() => {
    if (customMarkerContainerRef.current) {
      setMarkerSize({
        width: customMarkerContainerRef.current.clientWidth,
        height: customMarkerContainerRef.current.clientHeight
      });
    }
  }, [customMarkerContainerRef.current]);
  const onMarkerPress = e => {
    var _props$onPress;
    (_props$onPress = props.onPress) === null || _props$onPress === void 0 ? void 0 : _props$onPress.call(props, (0, _mouseEvent.mapMouseEventToMapEvent)(e, props.coordinate, map, 'marker-press'));
    props.toggleCalloutVisible();
  };
  const hasNonCalloutChildren = _react.default.useMemo(() => !!_react.default.Children.toArray(props.children).find(child => {
    return child.type !== _callout.Callout;
  }), [props.children]);

  //Default anchor values to react-native-maps values (https://github.com/react-native-maps/react-native-maps/blob/master/docs/marker.md)
  const anchor = props.anchor || {
    x: 0.5,
    y: 1
  };
  const calloutAnchor = props.calloutAnchor || {
    x: 0.5,
    y: 0
  };
  const calloutContextValue = {
    calloutVisible: props.calloutVisible,
    toggleCalloutVisible: props.toggleCalloutVisible,
    coordinate: props.coordinate,
    markerSize,
    anchor: calloutAnchor
  };
  return /*#__PURE__*/_react.default.createElement(_callout.CalloutContext.Provider, {
    value: calloutContextValue
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, hasNonCalloutChildren ? /*#__PURE__*/_react.default.createElement(_api.OverlayViewF, {
    mapPaneName: "overlayMouseTarget",
    position: {
      lat: Number(props.coordinate.latitude),
      lng: Number(props.coordinate.longitude)
    },
    getPixelPositionOffset: (w, h) => ({
      x: -(w * anchor.x),
      y: -(h * anchor.y)
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: customMarkerContainerRef,
    onClick: () => onMarkerPress()
  }, props.children)) : /*#__PURE__*/_react.default.createElement(_api.Marker, {
    draggable: props.draggable,
    title: props.title,
    onClick: e => onMarkerPress(e),
    onDrag: e => {
      var _props$onDrag;
      return (_props$onDrag = props.onDrag) === null || _props$onDrag === void 0 ? void 0 : _props$onDrag.call(props, (0, _mouseEvent.mapMouseEventToMapEvent)(e, props.coordinate, map, ''));
    },
    onDragStart: e => {
      var _props$onDragStart;
      return (_props$onDragStart = props.onDragStart) === null || _props$onDragStart === void 0 ? void 0 : _props$onDragStart.call(props, (0, _mouseEvent.mapMouseEventToMapEvent)(e, props.coordinate, map, ''));
    },
    onDragEnd: e => {
      var _props$onDragEnd;
      return (_props$onDragEnd = props.onDragEnd) === null || _props$onDragEnd === void 0 ? void 0 : _props$onDragEnd.call(props, (0, _mouseEvent.mapMouseEventToMapEvent)(e, props.coordinate, map, ''));
    },
    options: {
      clickable: props.tappable,
      opacity: props.opacity,
      draggable: props.draggable,
      anchorPoint: props.anchor ? new google.maps.Point((_props$anchor = props.anchor) === null || _props$anchor === void 0 ? void 0 : _props$anchor.x, (_props$anchor2 = props.anchor) === null || _props$anchor2 === void 0 ? void 0 : _props$anchor2.y) : null
    },
    position: {
      lat: Number(props.coordinate.latitude),
      lng: Number(props.coordinate.longitude)
    },
    children: props.children
  })));
}
//# sourceMappingURL=marker.web.js.map